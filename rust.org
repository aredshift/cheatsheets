* Types

** Scalar types

- ~int~
- ~float~
- ~bool~
- ~char~

** Compound types

- ~tuple~
- ~array~

** Integers

*** Types

| Length  | Signed | Unsigned |
|---------+--------+----------|
| 8-bit   | i8     | u8       |
| 16-bit  | i16    | u16      |
| 32-bit  | i32    | u32      |
| 64-bit  | i64    | u64      |
| 128-bit | i128   | u128     |
| arch    | isize  | usize    |

*** Integer literals

| Number literals | Example     |
|-----------------+-------------|
| Decimal         | 98_222      |
| Hex             | 0xff        |
| Octal           | 0o77        |
| Binary          | 0b1111_0000 |
| Byte (u8 only)  | b'A'        |

** Floating Points

*** Types

| Length | Type |
|--------+------|
| 32-bit | f32  |
| 64-bit | f64  |


** Tuples

- Index like ~tup.idx~ eg. ~t.1~ for the 1th index
- An empty tuple ~()~ is called a *unit*
  - Expressions implicitly return a unit if they don't return anything else

* Expressions & Statements

[[https://rust-book.cs.brown.edu/ch03-03-how-functions-work.html#statements-and-expressions]["Rust is an expression-based language"]]

- Statements are instructions that perform some action and do not return a value.
- Expressions evaluate to a resultant value.

"If you add a semicolon to the end of an expression, you turn it into a statement, and it will then not return a value."


* Return values

[[https://rust-book.cs.brown.edu/ch03-03-how-functions-work.html#functions-with-return-values]["In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function."]]

[[https://doc.rust-lang.org/std/keyword.return.html][~return~ keyword still exists and is usable]]

** Returning values from loops

You can return values from loops like so:

#+begin_src rust
  let result = loop {
      break 3;
  }

  println!("The result is {result}") // 3
#+end_src

* Ownership, References, and Borrowing

** Box deallocation principle
=If a variable owns a box, when Rust deallocates the variable's frame, then Rust deallocates the box's heap memory."=

** Moved heap data principle
=If a variable x moves ownership of heap data to another variable y, then x cannot be used after the move.=

** Pointer safety principle
=Data should never be aliased and mutated at the same time.=


* Module system

- *Packages*: A Cargo feature that lets you build, test, and share crates
- *Crates*: A tree of modules that produces a library or executable
- *Modules* and *use*: Let you control the organization, scope, and privacy of paths
- *Paths*: A way of naming an item, such as a struct, function, or module
[[https://rust-book.cs.brown.edu/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html][Src]]

* Separation of Concerns for Binary Projects

[[https://rust-book.cs.brown.edu/ch12-03-improving-error-handling-and-modularity.html#separation-of-concerns-for-binary-projects][Src]]
#+begin_quote
The organizational problem of allocating responsibility for multiple tasks to the ~main~ function is common to many binary projects. As a result, the Rust community has developed guidelines for splitting the separate concerns of the binary program when ~main~ starts getting large. This process has the following steps:
- Split your program into a /main.rs/ and a /lib.rs/ and move your program's logic to /lib.rs/.
- As long as your command line parsing logic is small, it can remain in /main.rs/.
- When the command line parsing logic starts getting complicated, extract it from /main.rs/ and move it to /lib.rs/.

The responsibilities that remain in the ~main~ function after this process should be limited to the following:
- Calling the command line parsing logic with the argument values
- Setting up any other configuration
- Calling a ~run~ function in /lib.rs/
- Handling the error if ~run~ returns an error

This pattern is about separating concerns: /main.rs/ handles running the program, and /lib.rs/ handls all the logic of the task at hand. Because you can't test the ~main~ function directly, this structure lets you test all your program's logic by moving it into functions in /lib.rs/. The code that remains in /main.rs/ will be small enough to verify its correctness by reading it.
#+end_quote
