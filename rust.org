* Types

** Scalar types

- ~int~
- ~float~
- ~bool~
- ~char~

** Compound types

- ~tuple~
- ~array~

** Integers

*** Types

| Length  | Signed | Unsigned |
|---------+--------+----------|
| 8-bit   | i8     | u8       |
| 16-bit  | i16    | u16      |
| 32-bit  | i32    | u32      |
| 64-bit  | i64    | u64      |
| 128-bit | i128   | u128     |
| arch    | isize  | usize    |

*** Integer literals

| Number literals | Example     |
|-----------------+-------------|
| Decimal         | 98_222      |
| Hex             | 0xff        |
| Octal           | 0o77        |
| Binary          | 0b1111_0000 |
| Byte (u8 only)  | b'A'        |

** Floating Points

*** Types

| Length | Type |
|--------+------|
| 32-bit | f32  |
| 64-bit | f64  |


** Tuples

- Index like ~tup.idx~ eg. ~t.1~ for the 1th index
- An empty tuple ~()~ is called a *unit*
  - Expressions implicitly return a unit if they don't return anything else

* Expressions & Statements

[[https://rust-book.cs.brown.edu/ch03-03-how-functions-work.html#statements-and-expressions]["Rust is an expression-based language"]]

- Statements are instructions that perform some action and do not return a value.
- Expressions evaluate to a resultant value.

"If you add a semicolon to the end of an expression, you turn it into a statement, and it will then not return a value."


* Return values

[[https://rust-book.cs.brown.edu/ch03-03-how-functions-work.html#functions-with-return-values]["In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function."]]

[[https://doc.rust-lang.org/std/keyword.return.html][~return~ keyword still exists and is usable]]

** Returning values from loops

You can return values from loops like so:

#+begin_src rust
  let result = loop {
      break 3;
  }

  println!("The result is {result}") // 3
#+end_src

* Ownership, References, and Borrowing

** Box deallocation principle
=If a variable owns a box, when Rust deallocates the variable's frame, then Rust deallocates the box's heap memory."=

** Moved heap data principle
=If a variable x moves ownership of heap data to another variable y, then x cannot be used after the move.=

